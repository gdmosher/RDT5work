%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Latex Beamer Slide Presentation %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (1) Beamer installation
% Download the following 3 packages from 
%       http://sourceforge.net/project/showfiles.php?group_id=92412
% and save them in texmf tree of your home directory like this
% (a) latex-beamer goes in      ~/texmf/tex/latex/beamer 
% (b) pgf goes in               ~/texmf/tex/latex/pgf 
% (c) xcolor goes in            ~/texmf/tex/latex/xcolor

% (2) Beamer usage
% Manual for Beamer and Prosper: http://latex.perseguers.ch/contrib/presentations/guidelines.pdf
% Great quick start: http://www.math.umbc.edu/~rouben/beamer/quickstart.html 
% Examples: http://latex-beamer.sourceforge.net/ 
% Example: http://www-verimag.imag.fr/~lmorel/html/beamer.html
% Manual: /home/tgirke/texmf/tex/latex/beamer/latex-beamer-3.06/doc/beameruserguide.pdf
% Print handouts: cp myslides.pdf zzz.pdf; pdftops -expand zzz.pdf; psnup -4 -b6mm -f zzz.ps > zzzhandouts.ps; ps2pdf zzzhandouts.ps
% generate PDF slide show with command:
% pdflatex Rsequences.tex; bibtex Rsequences; pdflatex Rsequences.tex
% echo 'Sweave("Rsequences.Rnw")' | R --slave; echo 'Stangle("Rsequences.Rnw")' | R --slave; pdflatex Rsequences.tex;  bibtex Rsequences; pdflatex Rsequences.tex

\documentclass{beamer}
% Load a theme (graphics, colors,...) for the presentation
%\usepackage{beamerthemelined}
%\usepackage{beamerthemetree}
%\usetheme{default}
\usetheme{umbc2}
%\usepackage{beamerthemeclassic}

% For images:
\usepackage{graphicx}
% For color in text
\usepackage{color}

% For wrapping long URLs properly (may not be necessary)
\usepackage{url}

% Define comment command, which allows to comment out text with this syntax: \comment{my comment}
\newcommand{\comment}[1]{}

% Use UMBC theme collection. Download theme from: http://www.math.umbc.edu/~rouben/beamer/beamer-umbc.tar.gz
\useoutertheme{umbcfootline} 
% Define footnote line, see details: http://www.math.umbc.edu/~rouben/beamer/quickstart-Z-H-9.html#node_sec_9
\setfootline{\inserttitle \hfill \textit{\insertsection} \hfill \textit{\insertsubsection} \hfill Slide \insertframenumber/\inserttotalframenumber}

% BibTex Settings
\usepackage{natbib}
\renewcommand\refname{Bibliography} % Defines title of bibliography   

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}

% Increase print area on slides
\newenvironment{changemargin}[2]{%
  \begin{list}{}{%
    \setlength{\topsep}{0pt}%
    \setlength{\leftmargin}{#1}%
    \setlength{\rightmargin}{#2}%
    \setlength{\listparindent}{\parindent}%
    \setlength{\itemindent}{\parindent}%
    \setlength{\parsep}{\parskip}%
  }%
  \item[]}{\end{list}}

% Sweave settings
\SweaveOpts{echo=FALSE}
\usepackage{listings}

\hypersetup{pdfpagemode=FullScreen}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title{Basics on Analyzing Next Generation Sequencing Data with R and Bioconductor}
\subtitle{Data Analysis in Genome Biology \\GEN242}
\author{Thomas Girke}
\date{April 23, 2015}

\usepackage{Sweave}
\begin{document}
\SweaveOpts{engine=R,eps=FALSE,pdf=TRUE,strip.white=all}
\SweaveOpts{prefix=TRUE,prefix.string=fig-,include=TRUE}
\setkeys{Gin}{width=0.5\textwidth}


\frame{\titlepage}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Creates Separate Outline Slide at Beginning
%\section{Outline}
\frame{\scriptsize \tableofcontents}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Define to generate outline slide automatically at start of every new section
\AtBeginSection[]
{
   \begin{frame}
       \frametitle{Outline}
	\scriptsize
       \tableofcontents[currentsection]
   \end{frame}
}
% Same effect at subsection level
\AtBeginSubsection[]
{
   \begin{frame}
       \frametitle{Outline}
       \tableofcontents[currentsection,currentsubsection]
   \end{frame}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% slide %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
        \frametitle{Biosequence Analysis in R and Bioconductor}
\small
\begin{itemize}
        \item[] \hspace{-0.4cm} \textcolor{blue}{R Base}                \begin{itemize}
                \footnotesize
                        \item Some basic string handling utilities. Wide spectrum of numeric data analysis tools.
                \end{itemize}
        \item[] \hspace{-0.4cm} \textcolor{blue}{Bioconductor}
                \begin{itemize}
		\footnotesize
			\item Bioconductor packages provide much more sophisticated string handling utilities for sequence analysis.
			\begin{itemize}
			\footnotesize
				\item Biostrings \href{http://bioconductor.org/packages/release/bioc/html/Biostrings.html}{{\beamerbutton{Link}}}: general sequence analysis environment
				\item ShortRead \href{http://bioconductor.org/packages/release/bioc/html/ShortRead.html}{{\beamerbutton{Link}}}: pipeline for short read data
				\item IRanges \href{http://bioconductor.org/packages/release/bioc/html/IRanges.html}{{\beamerbutton{Link}}}: low-level infrastructure for range data
				\item GenomicRanges \href{http://bioconductor.org/packages/release/bioc/html/GenomicRanges.html}{{\beamerbutton{Link}}}: high-level infrastructure for range data
				\item GenomicFeatures \href{http://bioconductor.org/packages/release/bioc/html/GenomicFeatures.html}{{\beamerbutton{Link}}}: managing transcript centric annotations
				\item BSgenome \href{http://bioconductor.org/packages/release/bioc/html/BSgenome.html}{{\beamerbutton{Link}}}: genome annotation data
				\item biomaRt \href{http://bioconductor.org/packages/release/bioc/html/biomaRt.html}{{\beamerbutton{Link}}}: interface to BioMart annotations
				\item rtracklayer \href{http://bioconductor.org/packages/release/bioc/html/rtracklayer.html}{{\beamerbutton{Link}}}: Annotation imports, interface to online genome browsers
			\end{itemize}
                \end{itemize}
        \item[] \hspace{-0.4cm} \textcolor{blue}{Interface for non-R sequence analysis tools}
                \begin{itemize}
                \footnotesize
                        \item \textit{e.g.} short read aligners
                \end{itemize}
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{String Handling Utilities in R's Base Distribution}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Basic String Matching and Parsing}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{String matching.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
myseq <- c("ATGCAGACATAGTG", "ATGAACATAGATCC", "GTACAGATCAC") # Sample sequence data set.
myseq[grep("ATG", myseq)] # String searching with regular expression support.
pos1 <- regexpr("AT", myseq) # Searches 'myseq' for first match of pattern "AT".
as.numeric(pos1); attributes(pos1)$match.length # Returns position information of matches.
pos2 <- gregexpr("AT", myseq) # Searches 'myseq' for all matches of pattern "AT".
as.numeric(pos2[[1]]); attributes(pos2[[1]])$match.length # Returns positions of matches in first sequence.
gsub("^ATG", "atg", myseq) # String substitution with regular expression support.
@
\textcolor{blue}{Positional parsing.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
nchar(myseq) # Computes length of strings.
substring(myseq[1], c(1,3), c(2,5)) # Positional parsing of several fragments from one string.
substring(myseq, c(1,4,7), c(2,6,10)) # Positional parsing of many strings.
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Random Sequence Generation}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{Create any number of random DNA sequences of any length.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
rand <- sapply(1:100, function(x) paste(sample(c("A","T","G","C"), sample(10:20), replace=T), collapse=""))
rand[1:3]
@

\textcolor{blue}{Enumerate sequences to check for duplicates.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
table(c(rand[1:4], rand[1]))
@ 

\textcolor{blue}{Extract any number of pseudo reads from the following reference. Note: this requires \Rpackage{Biostrings}.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
library(Biostrings)
ref <- DNAString(paste(sample(c("A","T","G","C"), 100000, replace=T), collapse=""))
randstart <- sample(1:(length(ref)-15), 1000)
randreads <- Views(ref, randstart, width=15)
rand_set <- DNAStringSet(randreads)
unlist(rand_set)
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Sequence Handling with Bioconductor}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Important Data Objects in Biostrings}
\begin{itemize}
        \footnotesize
        \item[] \hspace{-0.8cm} \textcolor{blue}{\Rfunction{XString} for single sequence}
        \item \Rfunction{DNAString}: for DNA
        \item \Rfunction{RNAString}: for RNA
        \item \Rfunction{AAString}: for amino acid 
        \item \Rfunction{BString}: for any string
        \item[] \hspace{-0.8cm} \textcolor{blue}{\Rfunction{XStringSet} for many sequences}
        \item \Rfunction{DNAStringSet}: for DNA
        \item \Rfunction{RNAStringSet}: for RNA
        \item \Rfunction{AAStringSet}: for amino acid 
        \item \Rfunction{BStringSet}: for any string
        \item[] \hspace{-0.8cm} \textcolor{blue}{\Rfunction{QualityScaleXStringSet} for many sequences plus quality data}
        \item \Rfunction{QualityScaledDNAStringSet}: for DNA
        \item \Rfunction{QualityScaledRNAStringSet}: for RNA
        \item \Rfunction{QualityScaledAAStringSet}: for amino acid 
        \item \Rfunction{QualityScaledBStringSet}: for any string
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Sequence Import and Export}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{Download the following sequences to your current working directory and then import them into R: 
[ftp://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Bacteria/Halobacterium_sp_uid217/AE004437.ffn](ftp://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Bacteria/Halobacterium_sp_uid217/AE004437.ffn)
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
dir.create("data")
# system("wget ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium_sp_uid217/AE004437.ffn")
download.file("ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium_sp_uid217/AE004437.ffn", "data/AE004437.ffn")
readAAStringSet("ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/archaea/Halobacterium_salinarum/representative/GCA_000069025.1_ASM6902v1/GCA_000069025.1_ASM6902v1_protein.faa.gz")
myseq <- readDNAStringSet("data/AE004437.ffn")
myseq[1:3]
sub <- myseq[grep("99.*", names(myseq))]
length(sub)
writeXStringSet(sub, file="AE004437sub.ffn", width=80)
@ 
\textcolor{blue}{Open exported sequence file AE004437sub.ffn in a text editor.} 

\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Working with XString Containers}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{The XString stores the different types of biosequences in dedicated containers:}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
library(Biostrings)
d <- DNAString("GCATAT-TAC")
d
d[1:4]
r <- RNAString("GCAUAU-UAC") 
r <- RNAString(d) # Converts d into RNAString object.
p <- AAString("HCWYHH")
b <- BString("I store any set of characters. Other XString objects store only the IUPAC characters.")
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Working with XStringSet Containers}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{XStringSet containers allow to store many biosequences in one object:}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
dset <- DNAStringSet(c("GCATATTAC", "AATCGATCC", "GCATATTAC")) 
names(dset) <- c("seq1", "seq2", "seq3") # Assigns names
dset[1:2]
width(dset) # Returns the length of each sequences
d <- dset[[1]] # The [[ subsetting operator returns a single entry as XString object
dset2 <- c(dset, dset) # Appends/concatenates two XStringSet objects
dsetchar <- as.character(dset) # Converts XStringSet to named vector 
dsetone <- unlist(dset) # Collapses many sequences to a single one stored in a DNAString container
@ 
\textcolor{blue}{Sequence subsetting by positions:}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
DNAStringSet(dset, start=c(1,2,3), end=c(4,8,5)) 
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{XMultipleAlignment Class}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{The XMultipleAlignment class stores the different types of multiple sequence alignments:}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
origMAlign <- readDNAMultipleAlignment(filepath = system.file("extdata",
              "msx2_mRNA.aln", package = "Biostrings"), format = "clustal")
origMAlign
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Basic Sequence Manipulations}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{Complement, reverse, and reverse \& complement of sequences:}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
randset <- DNAStringSet(rand)
complement(randset[1:2])
reverse(randset[1:2])
reverseComplement(randset[1:2])
@ 
\textcolor{blue}{Translate DNA sequences into proteins:}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
translate(randset[1:2])
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Pattern Matching}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{Pattern matching with mismatches}
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>=
myseq1 <- readDNAStringSet("ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium_sp_uid217/AE004437.ffn") 
mypos <- matchPattern("ATGGTG", myseq1[[1]], max.mismatch=1) # Finds pattern matches in reference 
countPattern("ATGGCT", myseq1[[1]], max.mismatch=1) # Counts only the corresponding matches
vcountPattern("ATGGCT", myseq1, max.mismatch=1) # Counts only the matches in many sequences
tmp <- c(DNAStringSet("ATGGTG"), DNAStringSet(mypos)) # Results shown in DNAStringSet object
consensusMatrix(tmp)[1:4,] # Returns a consensus  matrix for query and hits.
myvpos <- vmatchPattern("ATGGCT", myseq1, max.mismatch=1) # Finds all pattern matches in reference
myvpos # The results are stored as MIndex object.
Views(myseq1[[1]], start(myvpos[[1]]), end(myvpos[[1]])) # Retrieves the result for single entry
sapply(seq(along=myseq1), function(x) 
       as.character(Views(myseq1[[x]], start(myvpos[[x]]), end(myvpos[[x]])))) # All matches.
@
\textcolor{blue}{Pattern matching with regular expression support}
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>=
myseq <- DNAStringSet(c("ATGCAGACATAGTG", "ATGAACATAGATCC", "GTACAGATCAC"))
myseq[grep("^ATG", myseq, perl=TRUE)] # String searching with regular expression support
pos1 <- regexpr("AT", myseq) # Searches 'myseq' for first match of pattern "AT"
as.numeric(pos1); attributes(pos1)$match.length # Returns position information of matches
pos2 <- gregexpr("AT", myseq) # Searches 'myseq' for all matches of pattern "AT"
as.numeric(pos2[[1]]); attributes(pos2[[1]])$match.length # Match positions in first sequence
DNAStringSet(gsub("^ATG", "NNN", myseq)) # String substitution with regular expression support
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{PWM Viewing and Searching}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\centering
<<fig=TRUE, eval=TRUE, echo=TRUE, keep.source=TRUE>>=
pwm <- PWM(DNAStringSet(c("GCT", "GGT", "GCA"))) 
library(seqLogo); seqLogo(t(t(pwm) * 1/colSums(pwm)))
@ 
\vspace{-0.3cm}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
chr <- DNAString("AAAGCTAAAGGTAAAGCAAAA") 
matchPWM(pwm, chr, min.score=0.9) # Searches sequence for PWM matches with score better than min.score.
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Sequence and Quality Data: FASTQ Format}
\scriptsize
\begin{itemize}
	\item[] \hspace{-0.9cm}\textcolor{blue}{4 lines per sequence}
	\scriptsize
	\begin{enumerate}
	\scriptsize
		\item ID
		\item Sequence
		\item ID
		\item Base call qualities (Phred scores) as ASCII characters
	\end{enumerate}
	\vspace{0.3cm}
	\item[] \hspace{-0.9cm}\textcolor{blue}{Example of 3 Illumina reads in FASTQ format:}
\end{itemize}
\begin{Schunk} 
\begin{Sinput}
	@SRR038845.3 HWI-EAS038:6:1:0:1938 length=36
	CAACGAGTTCACACCTTGGCCGACAGGCCCGGGTAA
	+SRR038845.3 HWI-EAS038:6:1:0:1938 length=36
	BA@7>B=>:>>7@7@>>9=BAA?;>52;>:9=8.=A
	@SRR038845.41 HWI-EAS038:6:1:0:1474 length=36
	CCAATGATTTTTTTCCGTGTTTCAGAATACGGTTAA
	+SRR038845.41 HWI-EAS038:6:1:0:1474 length=36
	BCCBA@BB@BBBBAB@B9B@=BABA@A:@693:@B=
	@SRR038845.53 HWI-EAS038:6:1:1:360 length=36
	GTTCAAAAAGAACTAAATTGTGTCAATAGAAAACTC
	+SRR038845.53 HWI-EAS038:6:1:1:360 length=36
	BBCBBBBBB@@BAB?BBBBCBC>BBBAA8>BBBAA@
\end{Sinput}
\end{Schunk} 
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Sequence and Quality Data: \Robject{QualityScaleXStringSet}}
\begin{changemargin}{-0.5cm}{-0.5cm}
\tiny \textcolor{blue}{Phred quality scores are integers from 0-50 that are
stored as ASCII characters after adding 33. The basic R functions rawToChar and
charToRaw can be used to interconvert among their representations.} 
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
phred <- 1:9
phreda <- paste(sapply(as.raw((phred)+33), rawToChar), collapse=""); phreda
as.integer(charToRaw(phreda))-33 
dset <- DNAStringSet(sapply(1:100, function(x) paste(sample(c("A","T","G","C"), 20, replace=T), collapse=""))) # Creates random sample sequence.
myqlist <- lapply(1:100, function(x) sample(1:40, 20, replace=T)) # Creates random Phred score list.
myqual <- sapply(myqlist, function(x) toString(PhredQuality(x))) # Converts integer scores into ASCII characters.
myqual <- PhredQuality(myqual) # Converts to a PhredQuality object.
dsetq1 <- QualityScaledDNAStringSet(dset, myqual) # Combines DNAStringSet and quality data in QualityScaledDNAStringSet object.
dsetq1[1:2]
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Processing FASTQ Files with ShortRead}
\begin{changemargin}{-0.5cm}{-0.5cm}
\tiny \textcolor{blue}{Basic usage of \texttt{ShortReadQ} objects. To make the following sample code work, download and unzip this file \href{http://faculty.ucr.edu/~tgirke/HTML_Presentations/Manuals/Workshop_Dec_6_10_2012/Rsequences/data.zip}{{\beamerbutton{Link}}} to your current working directory.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
library(ShortRead)
fastq <- list.files("data", "*.fastq$"); fastq <- paste("data/", fastq, sep="")
names(fastq) <- paste("flowcell6_lane", 1:length(fastq), sep="_") 
(fq <- readFastq(fastq[1])) # Imports first FASTQ file
countLines(dirPath="./data", pattern=".fastq$")/4 # Counts numbers of reads in FASTQ files
id(fq)[1] # Returns ID field
sread(fq)[1] # Returns sequence
quality(fq)[1] # Returns Phred scores 
as(quality(fq), "matrix")[1,1:12] # Coerces Phred scores to numeric matrix
ShortReadQ(sread=sread(fq), quality=quality(fq), id=id(fq)) # Constructs a ShortReadQ from components
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Quality Reports of FASTQ Files}
\vspace{0.3cm}
\begin{changemargin}{-0.5cm}{-0.5cm}
\tiny \textcolor{blue}{The following seeFastq/seeFastqPlot functions generate and plot a series of useful quality statistics for a set of FASTQ files.}
<<seefastq, fig=TRUE, include=FALSE, eval=TRUE, echo=TRUE, keep.source=TRUE, prefix.string=Rsequences>>=
library(systemPipeR)
fqlist <- seeFastq(fastq=fastq, batchsize=800, klength=8) # For real data set batchsize to at least 10^5 
seeFastqPlot(fqlist[1:2], arrange=c(1,4,7))
@ 
\vspace{-0.2cm}
\begin{center}
\includegraphics[width=60mm] {Rsequences-seefastq.pdf} \\
Handles many samples in on PDF file. For more details see here \href{http://manuals.bioinformatics.ucr.edu/home/ht-seq\#TOC-Quality-Reports-of-FASTQ-Files-}{{\beamerbutton{Link}}}  
\end{center}
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Quality Report from ShortRead}
\vspace{0.3cm}
\begin{changemargin}{-0.5cm}{-0.5cm}
\tiny \textcolor{blue}{ShortRead contains various FASTQ quality report functions}
<<qualshortread, eval=FALSE, echo=TRUE, keep.source=TRUE>>=
sp <- SolexaPath(system.file('extdata', package='ShortRead'))
fl <- file.path(analysisPath(sp), "s_1_sequence.txt") 
fls <- c(fl, fl) 
coll <- QACollate(QAFastqSource(fls), QAReadQuality(), QAAdapterContamination(), 
	          QANucleotideUse(), QAQualityUse(), QASequenceUse(), QAFrequentSequence(n=10), 
		  QANucleotideByCycle(), QAQualityByCycle())
x <- qa2(coll, verbose=TRUE)
res <- report(x)
if(interactive())
browseURL(res) 
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Filtering and Trimming FASTQ Files with ShortRead I}
\begin{changemargin}{-0.5cm}{-0.5cm}
\tiny \textcolor{blue}{Adaptor trimming}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
fqtrim <- trimLRPatterns(Rpattern="GCCCGGGTAA", subject=fq)
sread(fqtrim)[1:2]
@
\tiny \textcolor{blue}{Read counting and duplicate removal}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
tables(fq)$distribution # Counts read occurences
sum(srduplicated(fq)) # Identifies duplicated reads
fq[!srduplicated(fq)]
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Filtering and Trimming FASTQ Files with ShortRead II}
\begin{changemargin}{-0.5cm}{-0.5cm}
\tiny \textcolor{blue}{Trimming low quality tails}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
cutoff <- 30
cutoff <- rawToChar(as.raw(cutoff+33))
sread(trimTails(fq, k=2, a=cutoff, successive=FALSE))[1:2]
@
\tiny \textcolor{blue}{Removal of reads with x Phred scores below a threshold value}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
cutoff <- 30
qcount <- rowSums(as(quality(fq), "matrix") <= 20) 
fq[qcount == 0] # Number of reads where all Phred scores >= 20
@
\tiny \textcolor{blue}{Removal of reads with x Ns and/or low complexity segments}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
filter1 <- nFilter(threshold=1) # Keeps only reads without Ns
filter2 <- polynFilter(threshold=20, nuc=c("A","T","G","C")) # Removes reads with >=20 of one nucleotide
filter <- compose(filter1, filter2)
fq[filter(fq)]
@ 
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Memory Efficient FASTQ Processing}
\begin{changemargin}{-0.5cm}{-0.5cm}
\scriptsize
\textcolor{blue}{Streaming through FASTQ files with \texttt{FastqStreamer} and random sampling reads with \texttt{FastqSampler}}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
fq <- yield(FastqStreamer(fastq[1], 50)) # Imports first 50 reads 
fq <- yield(FastqSampler(fastq[1], 50)) # Random samples 50 reads 
@
\vspace{0.3cm}
\scriptsize
\textcolor{blue}{Streaming through a FASTQ file while applying filtering/trimming functions and writing the results to a new file.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>= 
f <- FastqStreamer(fastq[1], 50) 
while(length(fq <- yield(f))) {
	fqsub <- fq[grepl("^TT", sread(fq))] 
	writeFastq(fqsub, paste(fastq[1], "sub", sep="_"), mode="a", compress=FALSE)
}
close(f)
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% slide %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Range Operations}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Important Data Objects for Range Operations}
\begin{itemize}
        \footnotesize
        \item \Rfunction{IRanges}: stores range data only (IRanges library)
        \item \Rfunction{GRanges}: stores ranges and annotations (GenomicRanges library)
        \item \Rfunction{GRangesList}: list version of GRanges container (GenomicRanges library)
\end{itemize}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Range Data Are Stored in IRanges and GRanges Containers}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{Constructing GRanges Objects}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
library(GenomicRanges); library(rtracklayer)
gr <- GRanges(seqnames = Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)), ranges = IRanges(1:10, end = 7:16, names = head(letters, 10)), strand = Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)), score = 1:10, GC = seq(1, 0, length = 10)) # Example of creating a GRanges object with its constructor function.
gff <- import.gff("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/Samples/gff3.gff", 
                  asRangedData=FALSE) # Imports a simplified GFF3 genome annotation file.
seqlengths(gff) <- end(ranges(gff[which(values(gff)[,"type"]=="chromosome"),])) 
names(gff) <- 1:length(gff) # Assigns names to corresponding slot.
gff[1:4,]
gff_rd <- as(gff, "RangedData") # Coerces GRanges object to RangedData class.
gff_gr <- as(gff_rd, "GRanges") # Coerces RangedData object to GRanges class. 
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Utilities for Range Containers}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{Accessor and subsetting methods for GRanges objects}
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>=
gff[1:4]; gff[1:4, c("type", "group")]; gff[2] <- gff[3] # Subsetting and replacement 
c(gff[1:2], gff[401:402]) # GRanges objects can be concatenated with the c() function.
seqnames(gff); ranges(gff); strand(gff); seqlengths(gff) # Accessor functions 
start(gff[1:4]); end(gff[1:4]); width(gff[1:4]) # Direct access to IRanges components
values(gff); values(gff)[, "type"] # Accessing metadata component. 
gff[elementMetadata(gff)[ ,"type"] == "gene"] # Returns only gene ranges.
@
\textcolor{blue}{Useful utilities for GRanges objects}
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>=
gff <- gff[values(gff)$type != "chromosome"] # Remove chromosome ranges
strand(gff) <- "*" # Erases the strand information
reduce(gff) # Collapses overlapping ranges to continuous ranges.
gaps(gff) # Returns uncovered regions.
disjoin(gff) # Returns disjoint ranges.
coverage(gff) # Returns coverage of ranges.
findOverlaps(gff, gff[1:4]) # Returns the index pairings for the overlapping ranges. 
countOverlaps(gff, gff[1:4]) # Counts overlapping ranges 
subsetByOverlaps(gff, gff[1:4]) # Returns only overlapping ranges 
@
\textcolor{blue}{GRangesList Objects}
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>=
sp <- split(gff, seq(along=gff)) # Stores every range in separate component of a GRangesList object
split(gff, seqnames(gff)) # Stores ranges of each chromosome in separate component.
unlist(sp) # Returns data as GRanges object
sp[1:4, "type"] # Subsetting of GRangesList objects is similar to GRanges objects.
lapply(sp[1:4], length); sapply(sp[1:4], length) # Looping over GRangesList objects similar to lists
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{\emph{TranscriptDb}: Managing Transcript Ranges}
\small
\begin{changemargin}{-0.6cm}{-0.8cm}
\scriptsize
\vspace{0.2cm}
\textcolor{blue}{Storing annotation ranges in \emph{TranscriptDb} databases makes many operations more robust and convenient.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
library(GenomicFeatures)
download.file("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/Samples/gff3.gff", "data/gff3.gff")
txdb <- makeTranscriptDbFromGFF(file="data/gff3.gff",
        format="gff3",
        dataSource="TAIR",
	species="Arabidopsis thaliana")
saveDb(txdb, file="./data/TAIR10.sqlite")
txdb <- loadDb("./data/TAIR10.sqlite")
tr <- transcripts(txdb)
GRList <- transcriptsBy(txdb, by = "gene")
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Generate \emph{TranscriptDb} from BioMart}
\small
\begin{changemargin}{-0.6cm}{-0.8cm}
\scriptsize
\vspace{0.2cm}
\textcolor{blue}{Alternative sources for creating \emph{TranscriptDb} databases are BioMart, Bioc annotation packages, UCSC, etc. The following shows how to create a \emph{TranscriptDb} from BioMart.}
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>=
library(GenomicFeatures); library("biomaRt")
txdb <- makeTranscriptDbFromBiomart(biomart = "plants_mart_25", dataset = "athaliana_eg_gene")
@
\vspace{0.3cm}
\textcolor{blue}{The following steps are useful to find out what is availble in BioMart. }
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>=
listMarts() # Lists BioMart databases
mymart <- useMart("plants_mart_25") # Select one, here plants_mart_25
listDatasets(mymart) # List datasets available in the selected BioMart database
mymart <- useMart("plants_mart_25", dataset="athaliana_eg_gene")
listAttributes(mymart) # List available features 
getBM(attributes=c("ensembl_gene_id", "description"), mart=mymart)[1:4,]
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Efficient Sequence Parsing with \Rfunction{getSeq}}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\textcolor{blue}{The following parses all annotation ranges provided by \texttt{GRanges} object (e.g. \textit{gff}) from a genome sequence stored in a local file.}
<<eval=TRUE, echo=TRUE, keep.source=TRUE>>=
gff <- gff[values(gff)$type != "chromosome"] # Remove chromosome ranges
rand <- DNAStringSet(sapply(unique(as.character(seqnames(gff))), function(x) paste(sample(c("A","T","G","C"), 200000, replace=T), collapse="")))
writeXStringSet(DNAStringSet(rand), "./data/test")
getSeq(FaFile("./data/test"), gff)
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Homework 5a}
\begin{changemargin}{-0.5cm}{-0.5cm}
\scriptsize
\begin{itemize} 
	\item[Task 1] Write a demultiplexing function that accepts any number of barcodes and splits a FASTQ file into as many subfiles as there are barcodes. At the same time the function should remove low quality tails from the reads. The following function accomplishes the first step. Expand this function so that it performs the second step as well. 
\end{itemize} 
\vspace{0.2cm}
\textcolor{blue}{Sample code:}
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>= 
demultiplex <- function(x, barcode, nreads) {
	f <- FastqStreamer(x, nreads) 
	while(length(fq <- yield(f))) {
		for(i in barcode) {
			pattern <- paste("^", i, sep="")
			fqsub <- fq[grepl(pattern, sread(fq))] 
			if(length(fqsub) > 0) {
				writeFastq(fqsub, paste(x, i, sep="_"), mode="a", compress=FALSE)
			}
		}
	}
	close(f)
}
demultiplex(x=fastq[1], barcode=c("TT", "AA", "GG"), nreads=50)
@
<<Solution for Homework 5 Task 1, eval=FALSE, echo=FALSE, keep.source=FALSE>>=
demultiplex <- function(x, barcode, nreads, cutoff) {
	f <- FastqStreamer(x, nreads) 
	while(length(fq <- yield(f))) {
		for(i in barcode) {
			pattern <- paste("^", i, sep="")
			fq <- trimTails(fq, k=2, a=rawToChar(as.raw(cutoff+33)), successive=FALSE)
			fqsub <- fq[grepl(pattern, sread(fq))] 
			if(length(fqsub) > 0) {
				writeFastq(fqsub, paste(x, i, sep="_"), mode="a", compress=FALSE)
			}
		}
	}
	close(f)
}
demultiplex(x=fastq[1], barcode=c("TT", "AA", "GG"), nreads=50, cutoff=20)
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% slide %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[containsverbatim]  
	\frametitle{Homework 5b}
\tiny
\begin{changemargin}{-0.5cm}{-0.5cm}
\begin{enumerate}
	\item[GFF] from \textit{Halobacterium sp}  \href{ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium\_sp\_uid217/AE004437.gff}{{\beamerbutton{Link}}}
	\item[Genome] from \textit{Halobacterium sp} \href{ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium\_sp\_uid217/AE004437.fna}{{\beamerbutton{Link}}}
        \vspace{0.3cm}
	\item[Task 2] Extract gene ranges, parse their sequences from genome and translate them into proteins
	\item[Task 3] Reduce overlapping genes and parse their sequences from genome
	\item[Task 4] Generate intergenic ranges and parse their sequences from genome
\end{enumerate}
\vspace{0.4cm}
\textcolor{blue}{Useful commands}
<<eval=FALSE, echo=TRUE, keep.source=TRUE>>=
download.file("ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium_sp_uid217/AE004437.gff", "data/AE004437.gff")
download.file("ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium_sp_uid217/AE004437.fna", "data/AE004437.fna")
chr <- readDNAStringSet("data/AE004437.fna")
gff <- import("data/AE004437.gff", asRangedData=FALSE)
gffgene <- gff[values(gff)[,"type"]=="gene"]
gene <- DNAStringSet(Views(chr[[1]], IRanges(start(gffgene), end(gffgene))))
names(gene) <- values(gffgene)[,"locus_tag"]
pos <- values(gffgene[strand(gffgene) == "+"])[,"locus_tag"]
p1 <- translate(gene[names(gene) %in% pos])
names(p1) <- names(gene[names(gene) %in% pos])
neg <- values(gffgene[strand(gffgene) == "-"])[,"locus_tag"]
p2 <- translate(reverseComplement(gene[names(gene) %in% neg]))
names(p2) <- names(gene[names(gene) %in% neg])
writeXStringSet(c(p1, p2), "mypep.fasta")
@
<<Solution for Homework 5 Task 2, eval=FALSE, echo=FALSE, keep.source=FALSE>>=
download.file("ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium_sp_uid217/AE004437.gff", "data/AE004437.gff")
download.file("ftp://ftp.ncbi.nih.gov/genbank/genomes/Bacteria/Halobacterium_sp_uid217/AE004437.fna", "data/AE004437.fna")
chr <- readDNAStringSet("data/AE004437.fna")
gff <- import("data/AE004437.gff", asRangedData=FALSE)
gffgene <- gff[values(gff)[,"type"]=="gene"]
gene <- DNAStringSet(Views(chr[[1]], IRanges(start(gffgene), end(gffgene))))
names(gene) <- values(gffgene)[,"locus_tag"]
pos <- values(gffgene[strand(gffgene) == "+"])[,"locus_tag"]
p1 <- translate(gene[names(gene) %in% pos])
names(p1) <- names(gene[names(gene) %in% pos])
neg <- values(gffgene[strand(gffgene) == "-"])[,"locus_tag"]
p2 <- translate(reverseComplement(gene[names(gene) %in% neg]))
names(p2) <- names(gene[names(gene) %in% neg])
writeXStringSet(c(p1, p2), "mypep.fasta")
@

<<Solution for Homework 5 Task 3, eval=FALSE, echo=FALSE, keep.source=FALSE>>=
reduced_ranges <- reduce(gffgene) # Collapses overlapping ranges to single ranges.
DNAStringSet(Views(chr[[1]], IRanges(start(reduced_ranges), end(reduced_ranges)))) 
@

<<Solution for Homework 5 Task 4, eval=FALSE, echo=FALSE, keep.source=FALSE>>=
intergenic <- gaps(reduced_ranges) # Returns uncovered regions
DNAStringSet(Views(chr[[1]], IRanges(start(intergenic), end(intergenic))))
@
\end{changemargin}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SLIDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}


